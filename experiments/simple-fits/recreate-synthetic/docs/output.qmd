---
title: "Fit to synthetic hospitalization data report"
author: "Will Koval (AD71@cdc.gov, CDC/ORR/CFA)"
format: pdf
toc: true
number-sections: true
execute:
    warning: false
jupyter: python3
---

# Purpose

Proof-of-concept experiment to test the calibration routine. The synthetic data should be
generated from the same process as the model, so the dynamics should be perfectly re-captured.

# Methods

## Data

Data are generated by the current release build using the `../input/base.json`. A target data
file is created by selectig the incident hospitalizations for pediatric cases (ages 0-17) and
adult cases (ages 18+).

## Parameters

| Parameter name | Description |
| :------------: | ----------- |
| `initial_incidence` | Initial fraction of population infectious |
| `initial_recovered` | Initial fraction of population immune to infection |
| `proportion_asymptomatic` | The fraction of new cases that will never develop symptoms |
| `relative_infectiousness_asymptomatics` | Multiplier for the relative infectiousness of asymptomatic infectious individuals compared to symptomatics |
| `Home.alpha` | Property of `Home` settings that modulates density-dependence |
| `Workplace.alpha` | Property of `Workplace` settings that modulates density-dependence |
| `School.alpha` | Property of `School` settings that modulates density-dependence |
| `CensusTract.alpha` | Property of `CensusTract` settings that modulates density-dependence |
| `symptom_progression_library` | Rates of symptom onset and recovery for symptom categories |
| `mean_delay_to_hospitalization` | Mean time from symptom onset to hospitalization |
| `mean_duration_of_hospitalization` | Mean time that hospitalized individuals stay in the hospital before recovery | In estimated range |
| `age_groups.min` | Age group lower bound associated with hospitalization risk values |
| `age_groups.probability` | Probability that symptomatic individuals become hospitalized for a given age group |
| `infectiousness_rate_fn` | Function to determine the rate at which infecitous indivudals generate infection attempts |

We assume no interventions, so parameters like facemask efficacy and the guidance policy are not used.

Simulation run time is set for 200 days.

### Fixed parameter values

| Parameter | Value | Source |
| :-------: | :---: | ------ |
| `initial_incidence` | 0.01 | Small intiial incidence for full curve |
| `initial_recovered` | 0.0 | Completely susceptible population |
| `proportion_asymptomatic` | 0.45 | Alpha variant estimate, Whitaker et al. 2022 Nat Comm. |
| `relative_infectiousness_asymptomatics` | 0.5 | Assumption that asymptomatics are half as infecitous (unfounded) |
| `Home.alpha` | 0.05 | Assume small density-dependence effect at home |
| `Workplace.alpha` | 0.0 | Assume no density-dependence in workplace |
| `School.alpha` | 0.1 | Assume moderate density-dependence effect in school |
| `CensusTract.alpha` | 0.0 | Assume no density-dependence in community |
| `symptom_progression_library` | Category-dependent Weibull | Use posteriors from viral-load isolation gudiance |
| `mean_delay_to_hospitalization` | 5.7 | Mean delay from Yadav et al. 2023 Am J Emerg Med |
| `mean_duration_of_hospitalization` | 8.0 | Approximated during GCM experiments using NHCS data |
| `age_groups.min` | 0, 18 | Split population into pediatric admissions and adult admissions |
| `age_groups.probability` | 0.075, 0.15 | Assumed to be lower than Delta (0.456) and Omicron (0.373) estimates from vaccinated populations Menni et al Lancet |
| `infectiousness_rate_fn` | Category-dependent triangle VL | Use posteriors from viral-load isolation gudiance |
| `infectiousness_rate_fn.scale` | 0.01 | Re-scale infectiousness to reduce $R_0$ |

### Fitted parameter values

We are attempting to recapture the target input values of the initial simulation by fitting
the scale of empirical infectiousness rate distributions, the density-dependence of at-home
and in-school transmission, and the proportion of infections that develop symptoms.

| Parameter | Prior | Source |
| :-------: | :---: | ------ |
| `infectiousness_rate_fn.scale` | Uniform(0.0, 0.2) | Aiming to re-capture 0.06 |
| `proportion_asymptomatic` | Uniform(0.0, 1.0) | Aiming to recapture 0.45 |
| `Home.alpha` | Uniform(0.0, 0.2) | Aiming to recapture 0.05 |
| `School.alpha` | Uniform(0.0, 0.2) | Aiming to recapture 0.1 |

Ideally the posteriors estimates should distinguish between the alpha values for `Home` and `School` settings.

We use uniform prior to let the high-quality synthetic data drive calibration.
Perturbation kernels will make small changes to the parameter sets using random walks

| Parameter | Perturbation |
| :-------: | :---: |
| `infectiousness_rate_fn.scale` | Norm(0.0, 0.01) |
| `proportion_asymptomatic` | Norm(0.0, 0.05) |
| `Home.alpha` | Norm(0.0, 0.01) |
| `School.alpha` | Norm(0.0, 0.01) |

The standard deviations of the pertubation kernels should approximately scale with the width
of the priors.
## Distance function

We split the simulated prevalence report into pediatric and adult hospital occupancy. We then assume
that each group in the synthetic data is Poisson distributed according to the simulation. We
take the sum of the two negative log likelihood scores as our distance measure.

# Results

Load the experiment history file if available

```{python}
from abmwrappers.experiment_class import Experiment

experiment = Experiment(img_file="../data/experiment_history.pkl")
```

```{python}
#| echo: false
for step, tolerance in experiment.tolerance_dict.items():
    print(f"Step {step} filtered for distances below {tolerance}.")
```

## Simulation visualizations

Plot and describe any relevant simulation output

```{python}
#| echo: false
import seaborn as sns
import matplotlib.pyplot as plt
import polars as pl

# For local implementations, account for relative path of docs:
# simulations = experiment.read_results(filename="simulations", input_dir ="../data")

# For azure implementations, use default blob container read:
simulations = experiment.read_results(filename="simulations", verbose = False)
distances = experiment.read_results(filename="distances",verbose=False)
best_sims=distances.sort("distance").filter(pl.col("distance")<2000).join(simulations, on="simulation", how="inner")

sns.lineplot(best_sims, x="t", y="count",hue="pediatric", estimator="median", errorbar=lambda x: (x.quantile(0.025), x.quantile(0.975)))
sns.scatterplot(experiment.target_data, x = "t", y="count",hue="pediatric",zorder=10)
plt.show()

sns.lineplot(best_sims.filter(pl.col("pediatric") == False), x="t", y="count",hue="distance", units="simulation", estimator=None)
sns.lineplot(best_sims.filter(pl.col("pediatric") == True), x="t", y="count",hue="distance", units="simulation", estimator=None)
sns.scatterplot(experiment.target_data, x = "t", y="count",hue="pediatric",zorder=10)
plt.show()
```

## Parameter posterior visualizations

Plot any relevant figures for the posterior distributions of fitted parameters
```{python}
from abmwrappers import plotting

plotting.plot_posterior_distribution_2d(experiment)

plotting.plot_posterior_distribution(
    experiment,
    visualization_methods=["density"],
    facet_by="parameter",
    include_priors=True
)
```
# Additional resources

## Citations
